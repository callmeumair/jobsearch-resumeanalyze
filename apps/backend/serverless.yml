service: jobsearch-resumeanalyze-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    MONGODB_URI: ${env:MONGODB_URI}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_REFRESH_SECRET: ${env:JWT_REFRESH_SECRET}
    ELASTICSEARCH_URL: ${env:ELASTICSEARCH_URL}
    RABBITMQ_URL: ${env:RABBITMQ_URL}
    RESUME_BUCKET: ${self:service}-${self:provider.stage}-resumes
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    RESUME_ENHANCE_QUEUE_URL: !Ref ResumeEnhanceQueue
    RESUME_NOTIFICATION_TOPIC_ARN: !Ref ResumeNotificationTopic
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:provider.environment.RESUME_BUCKET}
            - arn:aws:s3:::${self:provider.environment.RESUME_BUCKET}/*
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - !GetAtt ResumeParseQueue.Arn
            - !GetAtt ResumeEnhanceQueue.Arn
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref ResumeNotificationTopic

functions:
  auth:
    handler: src/handlers/auth.handler
    events:
      - http:
          path: /auth/{proxy+}
          method: any
          cors: true

  presignedUrl:
    handler: src/handlers/presignedUrl.handler
    events:
      - http:
          path: /api/resume/upload-url
          method: get
          cors: true

  resumeParser:
    handler: src/handlers/resumeParser.handler
    events:
      - sqs:
          arn: !GetAtt ResumeParseQueue.Arn
          batchSize: 1

  resumeEnhancer:
    handler: src/handlers/resumeEnhancer.handler
    events:
      - sqs:
          arn: !GetAtt ResumeEnhanceQueue.Arn
          batchSize: 1
    timeout: 30 # OpenAI API calls might take longer

  jobSearch:
    handler: src/handlers/jobSearch.handler
    events:
      - http:
          path: /api/jobs/search
          method: get
          cors: true

  graphql:
    handler: src/handlers/graphql.handler
    events:
      - http:
          path: /graphql
          method: any
          cors: true

  # Admin API endpoints
  adminListJobs:
    handler: src/handlers/admin.listJobs
    events:
      - http:
          path: /admin/jobs
          method: get
          cors: true
          authorizer: auth

  adminCreateJob:
    handler: src/handlers/admin.createJob
    events:
      - http:
          path: /admin/jobs
          method: post
          cors: true
          authorizer: auth

  adminUpdateJob:
    handler: src/handlers/admin.updateJob
    events:
      - http:
          path: /admin/jobs/{jobId}
          method: put
          cors: true
          authorizer: auth

  adminDeleteJob:
    handler: src/handlers/admin.deleteJob
    events:
      - http:
          path: /admin/jobs/{jobId}
          method: delete
          cors: true
          authorizer: auth

  adminDashboardStats:
    handler: src/handlers/admin.getDashboardStats
    events:
      - http:
          path: /admin/dashboard/stats
          method: get
          cors: true
          authorizer: auth

plugins:
  - serverless-esbuild
  - serverless-offline

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    platform: 'node'
    concurrency: 10

resources:
  Resources:
    ResumeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.RESUME_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE]
              AllowedOrigins: ['*']
              MaxAge: 3000

    ResumeParseQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-parse-queue
        VisibilityTimeout: 900 # 15 minutes
        MessageRetentionPeriod: 1209600 # 14 days

    ResumeEnhanceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-enhance-queue
        VisibilityTimeout: 900 # 15 minutes
        MessageRetentionPeriod: 1209600 # 14 days

    ResumeParseQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref ResumeParseQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt ResumeParseQueue.Arn
              Condition:
                ArnLike:
                  aws:SourceArn: !GetAtt ResumeBucket.Arn

    ResumeEnhanceQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref ResumeEnhanceQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt ResumeEnhanceQueue.Arn
              Condition:
                ArnLike:
                  aws:SourceArn: !GetAtt ResumeParserFunction.Arn

    ResumeParserFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: ${self:service}-${self:provider.stage}-resume-parser
        Handler: src/handlers/resumeParser.handler
        Role: !GetAtt ResumeParserRole.Arn

    ResumeParserRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: ResumeParserPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource: !GetAtt ResumeEnhanceQueue.Arn

    ResumeNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-notifications

    ResumeNotificationSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref ResumeNotificationTopic
        Protocol: email
        Endpoint: ${env:NOTIFICATION_EMAIL} 